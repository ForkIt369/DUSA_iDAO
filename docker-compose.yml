version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - AUTH_SERVICE_URL=http://auth-service:3001
      - REGISTRY_SERVICE_URL=http://registry-service:3002
      - DEPLOYMENT_SERVICE_URL=http://deployment-service:3003
      - ANALYTICS_SERVICE_URL=http://analytics-service:3004
      - WEB3_SERVICE_URL=http://web3-service:3005
    depends_on:
      - auth-service
      - registry-service
      - deployment-service
      - analytics-service
      - web3-service
    networks:
      - mcp-network

  # Authentication Service
  auth-service:
    build:
      context: ./services/auth-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/mcp_auth
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=development_jwt_secret
      - JWT_EXPIRES_IN=1d
      - WEB3_SERVICE_URL=http://web3-service:3005
    depends_on:
      - postgres
      - redis
    networks:
      - mcp-network

  # MCP Registry Service
  registry-service:
    build:
      context: ./services/registry-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/mcp_registry
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - IPFS_API_URL=http://ipfs:5001
      - WEB3_SERVICE_URL=http://web3-service:3005
    depends_on:
      - postgres
      - elasticsearch
      - ipfs
    networks:
      - mcp-network

  # Deployment Service
  deployment-service:
    build:
      context: ./services/deployment-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/mcp_deployment
      - REDIS_URL=redis://redis:6379
      - KUBERNETES_API_URL=http://kube-api-server:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres
      - redis
    networks:
      - mcp-network

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/mcp_analytics
      - CLICKHOUSE_URL=http://clickhouse:8123
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - clickhouse
      - redis
    networks:
      - mcp-network

  # Web3 Service
  web3-service:
    build:
      context: ./services/web3-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/mcp_web3
      - ETHEREUM_RPC_URL=http://ganache:8545
      - IPFS_API_URL=http://ipfs:5001
      - ARWEAVE_URL=http://arweave:1984
      - CONTRACT_ADDRESS=0x0000000000000000000000000000000000000000
    depends_on:
      - postgres
      - ganache
      - ipfs
    networks:
      - mcp-network

  # Frontend
  frontend:
    build:
      context: ./frontend
    ports:
      - "8080:80"
    environment:
      - API_URL=http://localhost:3000
    depends_on:
      - api-gateway
    networks:
      - mcp-network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=mcp_auth,mcp_registry,mcp_deployment,mcp_analytics,mcp_web3
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    networks:
      - mcp-network

  # Redis for Caching and Pub/Sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - mcp-network

  # Elasticsearch for Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - mcp-network

  # ClickHouse for Analytics
  clickhouse:
    image: clickhouse/clickhouse-server:23.3
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    networks:
      - mcp-network

  # Ganache for Local Ethereum Development
  ganache:
    image: trufflesuite/ganache:latest
    ports:
      - "8545:8545"
    command: --deterministic --mnemonic "test test test test test test test test test test test junk"
    networks:
      - mcp-network

  # IPFS Node
  ipfs:
    image: ipfs/kubo:latest
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8081:8080"
    volumes:
      - ipfs-data:/data/ipfs
    networks:
      - mcp-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - mcp-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3100:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - mcp-network

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - mcp-network

volumes:
  postgres-data:
  redis-data:
  elasticsearch-data:
  clickhouse-data:
  ipfs-data:
  prometheus-data:
  grafana-data:

networks:
  mcp-network:
    driver: bridge